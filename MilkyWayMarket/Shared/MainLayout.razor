@inherits LayoutComponentBase

@using Newtonsoft.Json
@implements IAsyncDisposable

@inject IDataService DataService
@inject HttpClient HttpClient;
@inject IJSRuntime JSRuntime

@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService

<RadzenDialog />
<RadzenNotification />
<RadzenTooltip />
<RadzenContextMenu />

<RadzenLayout style="grid-template-areas: 'rz-sidebar rz-header' 'rz-sidebar rz-body';">
	<RadzenHeader>
		<RadzenRow JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Center" Gap="0">
			<RadzenColumn Size="5">
				<RadzenSidebarToggle Click="@SidebarToggleClick"></RadzenSidebarToggle>
			</RadzenColumn>
			<RadzenColumn Size="7">
				<RadzenStack AlignItems="AlignItems.Center" Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End"></RadzenStack>
			</RadzenColumn>
		</RadzenRow>
	</RadzenHeader>
	<RadzenBody Expanded="@sidebarExpanded">
		<RadzenRow class="rz-mx-auto rz-px-4 rz-pt-2 rz-pt-md-4 rz-pt-lg-6 rz-pt-xl-12 rz-pb-2 rz-pb-lg-12" Style="max-width: 1440px;">
			<RadzenColumn Size="12">
				@Body
			</RadzenColumn>
		</RadzenRow>
	</RadzenBody>
	<RadzenSidebar Expanded="@sidebarExpanded" style="z-index: 2">
		<RadzenStack AlignItems="AlignItems.Center" class="rz-py-4 rz-py-lg-6" Style="padding: var(--rz-panel-menu-item-padding); border-bottom: var(--rz-panel-menu-item-border);">
			<RadzenImage Path="images/logo.png" style="width: 48px; height: 48px;"></RadzenImage>
			<RadzenText Text="Studio" TextStyle="TextStyle.Subtitle1" class="rz-mb-0" style="color: var(--rz-sidebar-color);" />
		</RadzenStack>
		<RadzenPanelMenu>
			<RadzenPanelMenuItem Text="Home" Path="" />
		</RadzenPanelMenu>
		<RadzenStack AlignItems="AlignItems.Center" Gap="0" class="rz-py-4 rz-py-lg-6" Style="padding: var(--rz-panel-menu-item-padding);">
			<RadzenText Text="Studio v1.0.0" TextStyle="TextStyle.Caption" style="color: var(--rz-text-disabled-color);" TagName="TagName.P" TextAlign="TextAlign.Center" />
			<RadzenText Text="@query" TextStyle="TextStyle.Caption" class="rz-mb-0" style="color: var(--rz-text-disabled-color);" TagName="TagName.P" TextAlign="TextAlign.Center" />
		</RadzenStack>
	</RadzenSidebar>
</RadzenLayout>

@code {
	string query = string.Empty;
	bool sidebarExpanded = true;
	IJSObjectReference module;
	IJSObjectReference database;
	IJSObjectReference mooket;

	void SidebarToggleClick()
	{
		sidebarExpanded = !sidebarExpanded;
	}

	protected override async Task OnInitializedAsync()
	{
		var databaseURL = "https://holychikenz.github.io/MWIApi/market.db";
		
		module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./dist/sql-httpvfs.js");
		database = await module.InvokeAsync<IJSObjectReference>("load", databaseURL);
		mooket = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./src/mooket.js");

		var objectReference = DotNetObjectReference.Create(this);
		
		await DataService.Init(HttpClient, mooket, database, objectReference);
	}

	[JSInvokable("ReceiveDataFromQuery")]
	public void ReceiveDataFromQuery(string array)
	{
		Console.Write(array.Replace("\r", "").Replace("\n", ""));
		query = array;
		var weatherForecast = JsonConvert.DeserializeObject<QueryResults>(array);


		foreach (var resultRow in weatherForecast.values)
		{
			var dateTime = DateTime.Parse(resultRow[0]);
			for (int i = 1; i < resultRow.Count; i++)
			{
				DataService.ReceiveData(
					weatherForecast.columns[i], 
					true,
					dateTime, 
					double.Parse(resultRow[i]));
			}
		}
		
		StateHasChanged();
	}

	async ValueTask IAsyncDisposable.DisposeAsync()
	{
		if (module is not null)
		{
			await module.DisposeAsync();
		}
	}

	public class QueryResults
	{
		public List<string> columns { get; set; }
		public List<List<string>> values { get; set; }
	}
}