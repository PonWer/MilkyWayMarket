@inherits LayoutComponentBase

@using Newtonsoft.Json
@implements IAsyncDisposable

@inject IDataService DataService
@inject HttpClient HttpClient;
@inject IJSRuntime JSRuntime

@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService

<RadzenDialog />
<RadzenNotification />
<RadzenTooltip />
<RadzenContextMenu />

<RadzenLayout style="grid-template-areas: 'rz-sidebar rz-header' 'rz-sidebar rz-body';">
	<RadzenHeader>
		<ChildContent>
			<RadzenRow AlignItems="AlignItems.Normal" JustifyContent="JustifyContent.Start" Gap="0px">
				<RadzenColumn Size="5">
					<RadzenStack Orientation="Orientation.Horizontal" AlignItems="AlignItems.Start">
						<RadzenText Text="Milky Way Idle Market" TextStyle="TextStyle.H2"/>
					</RadzenStack>
				</RadzenColumn>
				<RadzenColumn >
					<RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.End" JustifyContent="JustifyContent.End">
						<RadzenLabel Text="DataService:" Style="float: right" />
						<RadzenLabel Text="@dataUpdatedMessage" Style="float: right" />
					</RadzenStack>
				</RadzenColumn>
			</RadzenRow>
		</ChildContent>
	</RadzenHeader>
	<RadzenBody>
		<RadzenRow class="rz-mx-auto rz-px-4 rz-pt-2 rz-pt-md-4 rz-pt-lg-6 rz-pt-xl-12 rz-pb-2 rz-pb-lg-12" Style="max-width: 1440px;">
			<RadzenColumn Size="12">
				@Body
			</RadzenColumn>
		</RadzenRow>
	</RadzenBody>
</RadzenLayout>

@code {
	private string dataUpdatedMessage;
	bool sidebarExpanded = true;
	IJSObjectReference module;
	IJSObjectReference database;
	IJSObjectReference mooket;
	
	protected override async Task OnInitializedAsync()
	{
		DataService.DataUpdated += (sender, message) =>
		{
			dataUpdatedMessage = $"{(string.IsNullOrWhiteSpace(message) ? "Idle" : message)}";
			StateHasChanged();
		};

		var databaseURL = "https://holychikenz.github.io/MWIApi/market.db";

		module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./dist/sql-httpvfs.js");
		database = await module.InvokeAsync<IJSObjectReference>("load", databaseURL);
		mooket = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./src/mooket.js");

		var objectReference = DotNetObjectReference.Create(this);

		await DataService.Init(HttpClient, mooket, database, objectReference);
	}

	[JSInvokable("ReceiveDataFromQuery")]
	public void ReceiveDataFromQuery(string array)
	{
		var queryResults = JsonConvert.DeserializeObject<QueryResults>(array);

		foreach (var resultRow in queryResults.values)
		{
			var dateTime = DateTime.Parse(resultRow[0]);
			for (int i = 1; i < resultRow.Count; i++)
			{
				DataService.ReceiveData(
					queryResults.columns[i],
					true,
					dateTime,
					string.IsNullOrWhiteSpace(resultRow[i]) ? -1 : double.Parse(resultRow[i]));
			}
		}

		DataService.ReceivedDataComplete();

		StateHasChanged();
	}

	async ValueTask IAsyncDisposable.DisposeAsync()
	{
		if (module is not null)
		{
			await module.DisposeAsync();
		}
	}

	public class QueryResults
	{
		public List<string> columns { get; set; }
		public List<List<string>> values { get; set; }
	}
}