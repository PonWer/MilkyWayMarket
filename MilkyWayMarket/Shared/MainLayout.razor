@inherits LayoutComponentBase

@implements IAsyncDisposable

@inject IDataService DataService
@inject HttpClient HttpClient;
@inject IJSRuntime JSRuntime

@inject NavigationManager NavigationManager
@inject DialogService DialogService
@inject ContextMenuService ContextMenuService
@inject TooltipService TooltipService
@inject NotificationService NotificationService

<RadzenDialog />
<RadzenNotification />
<RadzenTooltip />
<RadzenContextMenu />

<RadzenLayout style="grid-template-areas: 'rz-sidebar rz-header' 'rz-sidebar rz-body';">
	<RadzenHeader>
		<RadzenRow JustifyContent="JustifyContent.Start" AlignItems="AlignItems.Center" Gap="0">
			<RadzenColumn Size="5">
				<RadzenSidebarToggle Click="@SidebarToggleClick"></RadzenSidebarToggle>
			</RadzenColumn>
			<RadzenColumn Size="7">
				<RadzenStack AlignItems="AlignItems.Center" Orientation="Orientation.Horizontal" JustifyContent="JustifyContent.End"></RadzenStack>
			</RadzenColumn>
		</RadzenRow>
	</RadzenHeader>
	<RadzenBody Expanded="@sidebarExpanded">
		<RadzenRow class="rz-mx-auto rz-px-4 rz-pt-2 rz-pt-md-4 rz-pt-lg-6 rz-pt-xl-12 rz-pb-2 rz-pb-lg-12" Style="max-width: 1440px;">
			<RadzenColumn Size="12">
				@Body
			</RadzenColumn>
		</RadzenRow>
	</RadzenBody>
	<RadzenSidebar Expanded="@sidebarExpanded" style="z-index: 2">
		<RadzenStack AlignItems="AlignItems.Center" class="rz-py-4 rz-py-lg-6" Style="padding: var(--rz-panel-menu-item-padding); border-bottom: var(--rz-panel-menu-item-border);">
			<RadzenImage Path="images/logo.png" style="width: 48px; height: 48px;"></RadzenImage>
			<RadzenText Text="Studio" TextStyle="TextStyle.Subtitle1" class="rz-mb-0" style="color: var(--rz-sidebar-color);" />
		</RadzenStack>
		<RadzenPanelMenu>
			<RadzenPanelMenuItem Text="Home" Path="" />
		</RadzenPanelMenu>
		<RadzenStack AlignItems="AlignItems.Center" Gap="0" class="rz-py-4 rz-py-lg-6" Style="padding: var(--rz-panel-menu-item-padding);">
			<RadzenText Text="Studio v1.0.0" TextStyle="TextStyle.Caption" style="color: var(--rz-text-disabled-color);" TagName="TagName.P" TextAlign="TextAlign.Center" />
			<RadzenText Text="Copyright Ⓒ 2023" TextStyle="TextStyle.Caption" class="rz-mb-0" style="color: var(--rz-text-disabled-color);" TagName="TagName.P" TextAlign="TextAlign.Center" />
		</RadzenStack>
	</RadzenSidebar>
</RadzenLayout>

@code {
	bool sidebarExpanded = true;
	IJSObjectReference module;
	IJSObjectReference database;

	void SidebarToggleClick()
	{
		sidebarExpanded = !sidebarExpanded;
	}

	protected override async Task OnInitializedAsync()
	{
		var databaseURL = "https://holychikenz.github.io/MWIApi/market.db";
		var query = "SELECT DATETIME(time,\"unixepoch\") AS time, " +
					"\"Holy Cheese\", \"Holy Milk\",(\"Holy Cheese\" - \"Holy Milk\"*2) AS \"Margin\" " +
					"FROM ask";
		module = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./dist/sql-httpvfs.js");
		database = await module.InvokeAsync<IJSObjectReference>("load", databaseURL);
		var result = await database.InvokeAsync<IJSObjectReference>("db", query);

		// var mooket = await JSRuntime.InvokeAsync<IJSObjectReference>("import", "./src/mooket.js");

		// var result1 = await mooket.InvokeAsync<IJSObjectReference>("GetListOfMethodsOfObject", module);
		// Console.WriteLine(result1.ToString());
		// var result = await mooket.InvokeAsync<IJSObjectReference>("query", database, query);
		 Console.WriteLine(result);

		//await DataService.Init(HttpClient);
	}

	async ValueTask IAsyncDisposable.DisposeAsync()
	{
		if (module is not null)
		{
			await module.DisposeAsync();
		}
	}
}