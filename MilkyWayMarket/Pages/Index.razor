@page "/"
@using System.Globalization
@inject IDataService DataService

<PageTitle>Index</PageTitle>

<RadzenRow JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Center" Gap="1rem" class="rz-border-info-light">
	<RadzenDropDown @bind-Value=@selectectedValue
					Data=@items
					TextProperty="ItemName"
					ValueProperty="ItemIndex"
					Multiple=true
					AllowClear=true
					AllowFiltering="true"
					FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
					Placeholder="Select items"
					Chips=true
					Disabled="@(!DataService.Initiated)"
					Style="width: 100%; max-width: 400px;" />
	<RadzenButton style="width: 160px" Icon="search" BusyText="Loading ..." IsBusy=@DataService.Busy Click=@OnBusyClick Text="Search" Disabled="@(!DataService.Initiated)" />
</RadzenRow>
<RadzenRow JustifyContent="JustifyContent.Normal" AlignItems="AlignItems.Center" Gap="1rem" class="rz-border-info-light">
	<RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="0rem">
		<RadzenText Text="Start Date" class="rz-text-capitalize" />
		<RadzenDatePicker @bind-Value=@startDate Change="@DateRangeChanged" InitialViewDate="DateTime.Now" YearRange="2023:2023" ShowTime="false" Max="DateTime.Today" DateFormat="dd/MM/yyyy" />
	</RadzenStack>

	<RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="0rem">
		<RadzenText Text="End Date" class="rz-text-capitalize" />
		<RadzenDatePicker @bind-Value=@endDate Change="@DateRangeChanged" InitialViewDate="DateTime.Now" YearRange="2023:2023" ShowTime="false" Max="DateTime.Today.AddDays(1)" DateFormat="dd/MM/yyyy" />
	</RadzenStack>

	<RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="0rem">
		<RadzenText Text="Smooth lines" class="rz-text-capitalize" />
		<RadzenSwitch @bind-Value=@smooth Disabled="@(!DataService.Initiated)" Change="SettingsChangedCallback" />
	</RadzenStack>

	<RadzenStack Orientation="Orientation.Vertical" AlignItems="AlignItems.Center" Gap="0rem">
		<RadzenText Text="Show Data Labels" class="rz-text-capitalize" />
		<RadzenSwitch @bind-Value=@showDataLabels Disabled="@(!DataService.Initiated)" Change="SettingsChangedCallback" />
	</RadzenStack>
</RadzenRow>

@if (items.Any())
{
	<RadzenChart>
		@foreach (var data in dataSets)
		{
			<RadzenLineSeries Smooth="@smooth" Data="@data.Value" CategoryProperty="Date" Title="@data.Key" LineType="LineType.Dashed" ValueProperty="Revenue">
				<RadzenMarkers MarkerType="MarkerType.Square" />
				<RadzenSeriesDataLabels Visible="@showDataLabels" />
				@* 			<TooltipTemplate Context="item">
		<div>
		Revenue for <span>@item.Date</span> 2020:
		<strong>@item.Revenue</strong>
		</div>
		</TooltipTemplate> *@
			</RadzenLineSeries>
		}
		<RadzenCategoryAxis Padding="20" />
		<RadzenValueAxis Min="0" Step="@StepValue">
			<RadzenGridLines Visible="true" />
			<RadzenAxisTitle Text="Ask" />
		</RadzenValueAxis>
	</RadzenChart>
}
@code
{
	DateTime startDate = DateTime.Today;
	DateTime endDate = DateTime.Today;

	IList<int> selectectedValue = new int[] { };
	Dictionary<string, List<DataItem>> dataSets = new Dictionary<string, List<DataItem>>();
	List<itemKey> items = new List<itemKey>();

	bool smooth = false;
	bool showDataLabels = true;

	double StepValue = 1;

	class DataItem
	{
		public string Date { get; set; }
		public double Revenue { get; set; }
	}

	async Task OnBusyClick()
	{
		if (!selectectedValue.Any())
			return;

		await DataService.Query(selectectedValue.Select(x => items[x].ItemName).ToList());
	}

	protected override async Task OnInitializedAsync()
	{
		DataService.DataUpdated += (sender, message) =>
		{
			UpdateList();
			UpdateChartData();

			StateHasChanged();
		};

		UpdateList();
	}

	private void UpdateChartData()
	{
		if (DataService.Busy)
			return;

		if (!selectectedValue.Any())
			return;

		foreach (var dataSet in dataSets)
		{
			dataSet.Value.Clear();
		}

		foreach (var selected in selectectedValue)
		{
			var key = items[selected].ItemName;
			dataSets.TryAdd(key, new List<DataItem>());

			var list = new List<DataItem>();

			if (!DataService.History.ContainsKey(key))
				return;

			var days = (endDate - startDate).Days;

			Console.WriteLine($"days {days}");
			var matchingPeriod = DataService.History[key].history.Where(x => startDate.AddDays(-1) < x.Key && x.Key < endDate.AddDays(1));

			Console.WriteLine($"Getting item between {startDate.AddDays(-1)} and {endDate.AddDays(1)}");

			if (days <= 1)
			{
				Console.WriteLine("a");
				foreach (var itemHistory in matchingPeriod)
				{
					//Console.WriteLine($"Got {itemHistory.Key}");

					if (StepValue < itemHistory.Value.Ask)
						StepValue = itemHistory.Value.Ask;

					list.Add(new DataItem()
						{
							Date = itemHistory.Key.ToShortTimeString(),
							Revenue = itemHistory.Value.Ask,
						});
				}
			}
			else if (days <= 2)
			{
				Console.WriteLine("b");
				// skip every other
				foreach (var itemHistory in matchingPeriod.Where((x, i) => (i + 1) % 1 == 0))
				{
					//Console.WriteLine($"Got {itemHistory.Key}");

					if (StepValue < itemHistory.Value.Ask)
						StepValue = itemHistory.Value.Ask;

					list.Add(new DataItem()
						{
							Date = itemHistory.Key.ToString(),
							Revenue = itemHistory.Value.Ask,
						});
				}
			}
			else if (days <= 5)
			{
				Console.WriteLine("c");
				// skip every other
				foreach (var itemHistory in matchingPeriod.Where((x, i) => (i + 1) % 5 == 0))
				{
					//Console.WriteLine($"Got {itemHistory.Key}");

					if (StepValue < itemHistory.Value.Ask)
						StepValue = itemHistory.Value.Ask;

					list.Add(new DataItem()
						{
							Date = itemHistory.Key.ToShortDateString(),
							Revenue = itemHistory.Value.Ask,
						});
				}
			}
			else
			{
				Console.WriteLine("d");
				// skip every other
				foreach (var itemHistory in matchingPeriod.Where((x, i) => (i + 1) % 10 == 0))
				{
					//Console.WriteLine($"Got {itemHistory.Key}");

					if (StepValue < itemHistory.Value.Ask)
						StepValue = itemHistory.Value.Ask;

					list.Add(new DataItem()
						{
							Date = itemHistory.Key.ToShortDateString(),
							Revenue = itemHistory.Value.Ask,
						});
				}
			}

			StepValue = Math.Floor(StepValue / 3f);

			dataSets[key].AddRange(list);
		}

		StateHasChanged();
	}

	protected void UpdateList()
	{
		if (items.Any())
			return;

		items.Clear();
		foreach (var key in DataService.HistoryKeys)
		{
			items.Add(new itemKey()
				{
					ItemIndex = items.Count,
					ItemName = key
				});
		}

		StateHasChanged();
	}

	public class itemKey
	{
		public string ItemName { get; set; }
		public int ItemIndex { get; set; }
		public bool IsDisabled { get { return false; } }
	}

	private void DateRangeChanged()
	{
		UpdateChartData();
	}

	private void SettingsChangedCallback()
	{
		StateHasChanged();
	}
}

